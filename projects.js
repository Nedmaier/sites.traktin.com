const projects = [
  {
    id: 1,
    name: "Консервированная продукция",
    year: 2018,
    rank: 1,
    type: "shop",
	typename: "Интернет-магазин",
	resolvedissue: 4,
    status: "",
    difficulty: 3,
    information: [
	"название: интернет-магазин «Рэд Скай»", 
		"участие в проекте: автор проекта, разработка, ведение", 
		"схема работы: дроп-шипинг",
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 3", 
		"кол-во веток разработки: 1",
		"период работы проекта: с 2011 по 2023 г.",
		"оснвной домен в период работы: redsky.ru",
		"кол-во товарных позиций на сайте: более 400",
		"разработчик движка: 1 релиз - собственная разработка, 2 релиз - CS-CART"
	],
    logo: "media/rs.png",
	screenshots: [                          
      "media/rs_screen1.jpg",
      "media/rs_screen2.jpg"
    ],
    description: `
	<p>Интернет-магазин по продаже консервированной продукции с акцентом на мелкооптовые заказы. Минимальной единицей продажи выступала не отдельная банка, а целая коробка, что позволяло работать как с розничными точками, так и с небольшими оптовыми покупателями.</p>
	<p>Изначально проект был реализован на собственной разработке, но впоследствии был перенесён на платформу CS-CART. Переход позволил расширить функционал за счёт готовых модулей и повысить удобство администрирования.</p>
	`,
    details: "Удобное редактирование прайсов и описаний",
	solutions: [
      {
        title: "Удобное редактирование прайсов и описаний",
        description: `
		<p><b>Задача:</b> ускорить процесс обновления информации о товарах и снизить нагрузку на операторов при работе с каталогом.</p>
		<p><b>Решение:</b> в первом релизе проекта была реализована особая логика отображения каталога: страница с описанием товара для клиента выглядела почти так же, как и в административной панели. Разница была в том, что оператор видел дополнительные поля и мог прямо на этой же странице корректировать цену или описание товара.</p>
		<p>Таким образом, правка выполнялась без перехода в отдельные разделы админки — всё происходило «на месте». Это экономило время и делало работу с прайсами значительно проще.</p>
		<p><b>Пример:</b> оператор открывает карточку консервов «Говядина тушёная». Видит то же самое описание, что и клиент, но с дополнительными полями для редактирования. Он меняет цену с 120 ₽ на 125 ₽ и корректирует текст. После сохранения изменения сразу применяются и видны на сайте.</p>
		<p><b>Результат:</b> обновление информации о товарах стало быстрым и удобным. Операторы тратили меньше времени на рутинные действия, а покупатели всегда видели актуальные данные.</p>
		`
      },
      {
        title: "Витрина в формате прайса с минимальной единицей продажи",
        description: `
		<p><b>Задача:</b> упростить процесс заказа для мелкооптовых покупателей, которые привыкли оперировать коробками, мешками и упаковками, а не отдельными штуками.</p>
		<p><b>Решение:</b> вместо стандартных карточек товаров на витрине отображалась группа товаров, например «Тушёнка», а ниже в виде строк — позиции для заказа, напоминающие Excel-прайс. Каждая строка содержала мини-фотографию, наименование, единицу измерения, цену за штуку и цену за коробку.</p>
		<p>Для покупателя это было удобно: он видел сразу обе цены и мог вводить количество коробок, не думая о пересчётах. Система автоматически рассчитывала итоговую стоимость. В корзине такие позиции также отображались в оптовом формате, например: «Свинина тушёная — 1 коробка».</p>
		<p>Для каждой товарной группы можно было задать собственную минимальную единицу продажи. Например, для тушёнки — коробка, для сахара — мешок, для продукции в стекле — упаковка.</p>
		<p><b>Пример:</b> покупатель выбирает тушёнку. В строке он сразу видит: цена за штуку — 120 ₽, цена за коробку (24 шт.) — 2880 ₽. Он указывает «2 коробки», и система пересчитывает сумму в 5760 ₽. В корзине позиция отображается именно как «2 коробки тушёнки», а не как 48 банок.</p>
		<p><b>Результат:</b> интерфейс стал привычным и удобным для мелкооптовых клиентов. Они сразу видели цену за коробку или мешок, не тратили время на пересчёты и могли быстрее формировать заказ. Магазин укрепил доверие покупателей, предоставив понятный инструмент для оптовых закупок.</p>
		`
      },
	  {
        title: "Кратность заказа во втором релизе",
        description: `
		<p><b>Задача:</b> исключить путаницу при оформлении заказов, когда покупатели по привычке указывали количество штук, а система интерпретировала это как количество коробок или упаковок.</p>
		<p><b>Решение:</b> во втором релизе система сохранила формат списка товаров, но доработала механику выбора количества. Теперь минимальное количество для заказа отображалось сразу в штуках, но кратно коробке или упаковке. Например, для тушёнки минимальное значение стояло 36 штук.</p>
		<p>При изменении количества стрелками оно переключалось кратно: 36 → 72 → 108. Если клиент пытался ввести число вручную, система проверяла значение и либо выдавала сообщение об ошибке, либо автоматически исправляла его на ближайшее кратное минимальной единице.</p>
		<p>Таким образом, покупатель всегда видел реальные штуки, но система при этом сохраняла контроль за минимальной партией.</p>
		<p><b>Пример:</b> клиент хочет заказать тушёнку. В строке сразу указано «36 шт.». Если он нажимает «+», количество меняется на 72 шт. Если он вручную вводит 40, система исправляет значение обратно на 36 или 72. Таким образом исключается риск ошибочного заказа.</p>
		<p><b>Результат:</b> клиенты перестали путаться в единицах измерения. Система стала понятнее для пользователей, сохранив при этом требование к оптовым партиям. Магазин избавился от ошибок в заказах и недовольства покупателей.</p>
		`
      },
	  {
        title: "Оплата картой и по QR-коду без подтверждения оператором",
        description: `
		<p><b>Задача:</b> ускорить процесс оформления заказов и дать покупателям возможность сразу оплачивать покупки онлайн, без ожидания проверки оператором.</p>
		<p><b>Решение:</b> во втором релизе магазина был внедрён модуль оплаты картой и через QR-код (СБП). В отличие от других проектов, где требовалось подтверждение оператором из-за необходимости проверки остатков, здесь оплату можно было производить сразу.</p>
		<p>Это стало возможным благодаря тому, что складской учёт был организован и количество товара на сайте всегда соответствовало реальному наличию. После успешной транзакции заказ автоматически переводился в статус «Оплачен», а клиент получал электронный чек на почту.</p>
		<p><b>Пример:</b> покупатель выбирает 5 коробок тушёнки и сразу оплачивает их банковской картой. Через несколько секунд заказ отображается как оплаченный, оператор получает уведомление о поступившем платеже и может сразу передавать заказ в обработку.</p>
		<p><b>Результат:</b> процесс оформления заказа стал быстрее и удобнее для клиентов. Магазин снизил нагрузку на операторов, так как отпала необходимость вручную подтверждать каждую оплату. В то же время покупатели получили привычный опыт онлайн-оплаты «в один шаг».</p>		
		`
      }
    ]
  },
  {
    id: 2,
    name: "Системы кондиционирования",
    year: 2023,
    rank: 2,
    type: "shop",
	typename: "Интернет-магазин",
	resolvedissue: 5,
    status: "",
    difficulty: 4,
    information: [
	"название: интернет-магазин «Кулер.Ю»", 
		"участие в проекте: автор проекта, разработка, ведение", 
		"схема работы: дроп-шипинг",
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 1", 
		"кол-во веток разработки: 1",
		"период работы проекта: с 2022 по 2023 г.",
		"оснвной домен в период работы: coole.ru",
		"кол-во товарных позиций на сайте: более 300",
		"разработчик движка: CS-CART"
	],
    logo: "media/cooler.png",
	screenshots: [                          
      "media/cooler_screen1.jpg"
    ],
    description: `
		<p>Интернет-магазин по продаже домашних и промышленных кондиционеров, в котором было представлено более 300 моделей от 10 производителей. Ассортимент включал как бытовые решения для квартир и офисов, так и профессиональные системы для больших помещений.</p>
		<p>Особенностью проекта стала организация поставок напрямую со складов официальных дилеров брендов, что значительно сокращало сроки доставки и обеспечивало актуальность наличия. Для каждого товара на сайте было подготовлено подробное описание с техническими характеристиками, а также инструкции по установке и эксплуатации в формате PDF.</p>
	`,
    details: "",
	solutions: [
      {
        title: "Интеграция CS-CART с банком и облачной онлайн-кассой",
        description: `
		<p><b>Задача:</b> организовать приём онлайн-оплат по всем правилам фискального учёта, но без использования локального кассового оборудования. Нужно было объединить интернет-магазин на CS-CART, банковский модуль и облачную кассу так, чтобы процесс был полностью автоматизированным и прозрачным.</p>
		<p><b>Решение:</b> после оформления заказа и подтверждения оператором у клиента появлялась кнопка «Оплатить». Далее он переходил на страницу оплаты: вводил данные карты или оплачивал по QR-коду через СБП. Оплата шла в банк, затем через API пересылалась в облачную кассу, которая формировала фискальный чек. Чек отправлялся оператору фискальных данных, далее в налоговую инспекцию, после чего формировался уникальный идентификатор и QR-код. Электронная копия чека поступала клиенту на e-mail и дублировалась в интернет-магазине.</p>
		<p>Важной частью работы стала корректная стыковка модулей: CS-CART → банк → облачная касса. Каждый модуль имел свои особенности, и задача заключалась в том, чтобы настроить их так, чтобы процесс проходил без разрывов. После успешной транзакции заказ автоматически переводился в статус «Оплачен».</p>
		<p><b>Пример:</b> клиент заказывает кондиционер. Оператор подтверждает заказ, клиент жмёт «Оплатить», вводит карту. Через несколько секунд получает на почту чек с QR-кодом и подтверждение оплаты, а оператор видит заказ как «Оплаченный» и запускает доставку.</p>
		<p><b>Результат:</b> интернет-магазин получил полностью автоматизированный процесс онлайн-оплаты и формирования фискальных чеков через облачную кассу. Благодаря интеграции модулей CS-CART, банка и облачной системы работа стала полностью соответствовать требованиям законодательства и при этом не требовала физической кассы в магазине.</p>
		`
      },
      {
        title: "Сборка комплекта из нескольких компонентов",
        description: `
		<p><b>Задача:</b> дать возможность покупателю собирать индивидуальные комплекты оборудования из нескольких взаимосвязанных деталей, чтобы подобрать решение под конкретные условия и не переплачивать за лишнее.</p>
		<p><b>Решение:</b> в системе была реализована функция конфигуратора. В карточке товара можно было собрать комплект из 2–5 компонентов, при этом каждый элемент выбирался из доступных вариантов. Например, мульти-кондиционер состоит из одного внешнего блока и нескольких внутренних. В карточке клиент мог выбрать внутренние блоки с разной мощностью или даже цветом под конкретное помещение.</p>
		<p>При изменении характеристик цена комплекта автоматически пересчитывалась и показывалась сразу на странице. В корзину попадал уже готовый комплект, который выглядел как одна позиция, но внутри содержал выбранные комбинации компонентов.</p>
		<p><b>Пример:</b> клиент выбирает мульти-кондиционер. Сайт предлагает внешний блок и 3 внутренних. Для комнаты 25 м² он выбирает блок на 3,5 кВт, для комнаты 15 м² — на 2 кВт, а для гостиной с тёмным интерьером — модель в чёрном цвете. Система мгновенно пересчитывает стоимость комплекта, и в корзине у клиента появляется готовый набор, оптимально подходящий под его условия.</p>
		<p><b>Результат:</b> покупатели получили удобный инструмент для индивидуальной сборки систем кондиционирования. Это позволило отказаться от стандартных «китовых» комплектов, где все блоки одинаковые, и подобрать более точное и выгодное решение. Магазин получил конкурентное преимущество, так как подобный функционал в отрасли встречался крайне редко.</p>
		`
      },
	  {
        title: "Автоматическая выгрузка остатков от поставщиков через Excel-прайсы",
        description: `
		<p><b>Задача:</b> обеспечить актуальность цен и остатков по товарам при работе с несколькими складами в разных городах.</p>
		<p><b>Решение:</b> поставщики присылали обновлённые прайсы в формате Excel с ценами и количеством. Система автоматически загружала эти файлы, находила совпадающие позиции и объединяла остатки по всем складам, формируя общее доступное количество. Это позволяло показывать клиенту суммарное наличие товара даже при хранении его на разных складах.</p>
		<p>При обработке файлов система учитывала различные состояния. Если в ячейке стоял прочерк, «нет в наличии» или «0», товар помечался как отсутствующий и переводился с витрины. Дополнительно можно было включить опцию «под заказ», чтобы клиент мог оформить заявку на недоступный товар. Если же строка с товаром исчезала из прайса, система скрывала его полностью — это означало снятие модели с производства или прекращение закупок у поставщика.</p>
		<p><b>Пример:</b> кондиционер числится на складе в Москве (5 шт.) и в Санкт-Петербурге (3 шт.). Система объединяет остатки и показывает клиенту доступно «8 шт.». Если в следующем прайсе по московскому складу остаток становится «0», клиент видит уже только «3 шт.». Если модель полностью исчезает из всех файлов, товар пропадает с витрины.</p>
		<p><b>Результат:</b> остатки всегда оставались актуальными, сайт автоматически отображал правильное количество и статус товаров. Это исключало ситуацию с заказами «впустую», повышало доверие клиентов и упрощало работу операторов.</p>
		`
      },
	  {
        title: "Синхронизация цен по прайсам поставщиков",
        description: `
		<p><b>Задача:</b> исключить ручное обновление цен и обеспечить, чтобы на сайте всегда отображалась актуальная стоимость товаров от поставщиков.</p>
		<p><b>Решение:</b> вместе с остатками система обрабатывала прайсы Excel, в которых были новые цены. При загрузке файла цена автоматически обновлялась в карточке товара. Если поставщик изменял стоимость — это тут же отражалось в интернет-магазине, без участия оператора.</p>
		<p>Система также позволяла задавать дополнительные правила: например, надбавку в процентах или фиксированную наценку к цене из прайса. Это помогало управлять маржой и автоматически выставлять конечные цены для покупателей.</p>
		<p><b>Пример:</b> поставщик обновил цену кондиционера с 45 000 ₽ до 47 000 ₽. После загрузки прайса стоимость в карточке товара изменилась автоматически. При установленной наценке +10 % клиент увидит конечную цену 51 700 ₽.</p>
		<p><b>Результат:</b> цены всегда соответствовали текущим данным поставщиков, что избавило операторов от рутинной работы и снизило риск ошибок. Автоматическая синхронизация ускорила обновление каталога и позволила гибко управлять ценообразованием.</p>
		`
      },
	  {
        title: "Автоматическая обработка фотографий поставщиков",
        description: `
		<p><b>Задача:</b> оптимизировать загружаемые фотографии товаров, которые от поставщиков часто приходили огромного размера (до 40 Мб и разрешением 5000×5000 px), чтобы не перегружать сайт и сервер.</p>
		<p><b>Решение:</b> был установлен модуль, который раз в сутки запускался по расписанию (cron-задача на сервере). Скрипт имел настройки в админке, где задавались шаблоны формата, размера и степени сжатия изображений. При обработке фотографии автоматически приводились к оптимальному виду: картинка весом 40 Мб сжималась до 140 Кб, сохраняя достаточное качество для просмотра на сайте.</p>
		<p>Для контроля в системе был предусмотрен режим логирования: администратор мог просмотреть, какие фотографии были успешно обработаны, какие — нет, а также степень сжатия и исходные параметры. Оператору не требовалось никаких действий: он загружал фотографии как есть, система всё делала автоматически.</p>
		<p>Также можно было настроить, сохранять ли оригиналы на сервере или удалять их после обработки. Если преобразование не удавалось, исходное изображение оставалось без изменений. Дополнительно система поддерживала разные алгоритмы сжатия, которые можно было выбрать в зависимости от задач.</p>
		<p><b>Пример:</b> оператор загружает фотографию кондиционера весом 38 Мб. Скрипт автоматически обрабатывает её, уменьшает до 150 Кб и приводит к размеру 1200×1200 px. В логах фиксируется исходный и конечный вес файла. На сайте отображается лёгкая и быстрая картинка, а оператор даже не задумывается о её оптимизации.</p>
		<p><b>Результат:</b> сайт стал работать быстрее, сервер не перегружался тяжёлыми файлами, а операторы избавились от необходимости самостоятельно обрабатывать изображения. Это сократило время на добавление товаров и исключило ошибки при подготовке контента.</p>
		`
      }
    ]
  },
  {
    id: 3,
    name: "Товары для праздника",
    year: 2012,
    rank: 2,
    type: "shop",
	typename: "Интернет-магазин",
	resolvedissue: 7,
    status: "",
    difficulty: 5,
	information: [
		"название: интернет-магазин «Дом игрушек»", 
		"участие в проекте: вледелец бизнеса, разработка, ведение", 
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 3", 
		"кол-во веток разработки: 3", 
		"дата последнего релиза: 20.05.2022",
		"период работы проекта: с 2007 по 2022 г.",
		"оснвной домен в период работы: domigrushek.ru",
		"кол-во товарных позиций на сайте: более 3000",
		"разработчик движка: собственная разработка"
		],
    logo: "media/di.png",
	screenshots: [                          
      "media/di_screen1.jpg"
    ],
    description: `
	<p>Один из первых интернет-магазинов в России, специализирующийся на продаже карнавальных костюмов и праздничной атрибутики. Первые версии проекта предусматривали возможность только оформления заказа без онлайн-оплаты. В последующих релизах был реализован полноценный функционал приёма платежей через интернет.</p>
	<p>Изначально магазин работал по модели удалённого склада, однако со временем перерос в офлайн-шоурум с примерочными зонами, что значительно повысило удобство для клиентов. Ассортимент превысил 3000 наименований, включая костюмы, аксессуары и праздничные товары.</p>
	<p>Доставка осуществлялась по всей России — как через «Почту России», так и посредством экспресс-служб, что позволило охватить максимально широкую аудиторию.</p>
	`,
    details: "",
	solutions: [
      {
        title: "Реализация онлайн-оплаты с подтверждением через e-mail",
        description: `
		<p><b>Задача:</b> обеспечить возможность оплаты заказа банковской картой онлайн, сохранив контроль оператора за наличием товара и корректностью оформления.</p>
		<p><b>Решение:</b> внедрена многоступенчатая схема оплаты. После оформления заказа клиент выбирает способ «Оплата по карте». Заказ поступает оператору, который проверяет наличие товара на складе и резервирует его. Затем оператор отправляет клиенту уникальную ссылку на e-mail для перехода к оплате.</p>
		<p>На платёжной странице клиент может оплатить заказ любым удобным способом: вводом реквизитов карты или через QR-код. После успешной транзакции система автоматически меняет статус заказа на «Оплачен». Клиент получает электронный чек на почту, а оператор уведомление о том, что заказ оплачен и готов к сборке.</p>
		<p><b>Пример:</b> клиент оформляет заказ на костюм и выбирает оплату картой. Оператор подтверждает наличие, резервирует товар и отправляет письмо со ссылкой. Клиент оплачивает через QR-код. Статус заказа меняется на «Оплачен», клиенту приходит чек, а оператору уведомление — заказ можно собирать и отправлять.</p>
		<p><b>Результат:</b> внедрение онлайн-оплаты сделало процесс более удобным и прозрачным для клиентов, сохранив при этом контроль за корректностью заказов со стороны оператора. Магазин получил инструмент для безопасного приёма платежей, а клиенты — возможность оплачивать покупки дистанционно с подтверждением по e-mail.</p>		
		`
      },
      {
        title: "Автоматизация формирования фискальных чеков для интернет-заказов",
        description: `
		<p><b>Задача:</b> убрать необходимость вручную пробивать интернет-заказы в кассе, когда каждый товар приходилось заносить по отдельности. Это занимало много времени и создавало ошибки, особенно при постоянно меняющейся номенклатуре и ценах, которые обновлялись только на сайте, а не в локальной кассовой программе.</p>

<p><b>Решение:</b> был создан механизм автоматического формирования чеков. Если заказ оформлялся через сайт, оператор нажимал кнопку «Создать чек», после чего система генерировала файл-шаблон с товарами, количеством и ценами из заказа. Реквизиты чека были заранее прописаны в шаблоне.</p>

<p>Фискальный регистратор работал в режиме наблюдения за специальной папкой на сервере. Как только туда попадал файл, кассовая программа обрабатывала его, через фискальный накопитель формировала чек и передавала данные оператору фискальных данных. В ответ возвращался QR-код, который прикладывался к чеку и мог быть автоматически отправлен клиенту на e-mail.</p>

<p>Если клиент приходил без онлайн-заказа, оператор в панели управления создавал заказ вручную, а дальше действовал тем же способом: формировал файл, чек печатался, клиент получал его на руки или на почту. Возвраты выполнялись аналогично, только в шаблон добавлялся признак «возврат» вместо «расчёт».</p>

<p><b>Пример:</b> клиент оформил заказ через сайт. Оператор нажимает кнопку «Создать чек», система формирует файл и кладёт его в папку. Кассовая программа автоматически печатает чек, возвращает QR-код и отправляет электронный чек на почту клиента.</p>

<p><b>Результат:</b> процесс пробития интернет-заказов стал полностью автоматизированным. Ручной ввод номенклатуры больше не требовался, сократилось время обслуживания клиентов, снизился риск ошибок и обеспечена синхронизация цен с сайтом без постоянных обновлений локальной базы. Возвраты стали оформляться так же быстро и удобно, как и продажи.</p>
		`
      },
	  {
        title: "Автоматическое формирование цен на доставку СДЭК и мониторинг заказов",
        description: `		
<p><b>Задача:</b> упростить процесс расчёта доставки для клиентов и операторов, исключив ручной ввод параметров и добавить прозрачный мониторинг движения посылки.</p>

<p><b>Решение:</b> у каждого товара в системе был прописан вес, который клиент не видел. При оформлении заказа клиент вводил город и выбирал вариант доставки — курьером или в пункт выдачи. Система через API СДЭК рассчитывала стоимость и сроки доставки на основе веса, страховки и тарифов. Эти данные отображались клиенту сразу, ещё до подтверждения заказа.</p>

<p>Когда оператор переводил заказ в статус «Доставка», система автоматически формировала трек-номер и отправляла его клиенту на e-mail вместе с прямой ссылкой для отслеживания. В этот же момент активировалась функция печати накладных, которые приклеивались на собранную посылку.</p>

<p>Далее система через API отслеживала статусы: «На сортировке», «В городе получателя», «Получен». При достижении финального статуса заказ автоматически закрывался в системе.</p>

<p><b>Пример:</b> клиент из Екатеринбурга оформляет заказ на костюм весом 1,5 кг. Система сразу показывает: «Доставка курьером — 450 ₽, срок 3 дня». После подтверждения заказа оператор переводит его в доставку, система генерирует трек-номер, отправляет письмо клиенту и печатает накладную. Клиент отслеживает заказ по прямой ссылке, а оператор видит статус в панели управления.</p>

<p><b>Результат:</b> клиенты получили удобный сервис с точным расчётом и онлайн-отслеживанием, а операторы перестали вручную создавать накладные и трек-номера. Весь процесс — от формирования стоимости до закрытия заказа — стал полностью автоматизированным. Было реализовано кастомное решение по API СДЭК, адаптированное под собственный движок интернет-магазина.</p>

		`
      },
	  {
        title: "Генерация и печать собственных штрих-кодов для товаров",
        description: `
		<p><b>Задача:</b> упростить учёт товаров и исключить проблемы, возникавшие из-за разных штрих-кодов одного и того же товара от разных производителей. Необходимо было реализовать систему, которая позволит формировать собственные уникальные коды без ведения громоздкой базы сторонних штрих-кодов.</p>

<p><b>Решение:</b> в системе был внедрён механизм генерации собственных штрих-кодов на основе внутреннего ID товара и его модификаций (цвет, размер и т. д.). Для каждого товара создавался уникальный код: сначала использовался ID товара, затем добавлялся префикс для модификаций, после чего формировалась контрольная часть кода по стандарту штрих-кодов.</p>

<p>При сохранении карточки товара система автоматически генерировала необходимое количество уникальных кодов. Например, при трёх цветовых вариантах и пяти размерах формировалось 15 уникальных штрих-кодов. Для защиты от ошибок система проверяла отсутствие дублей при генерации.</p>

<p>Далее была реализована функция печати ценников: по нажатию кнопки формировался PDF с шаблонным ценником, содержащим название, характеристики и сгенерированный штрих-код. Такой файл можно было распечатать на обычном лазерном принтере на самоклеящихся листах и наклеить на товары.</p>

<p><b>Пример:</b> оператор создаёт карточку костюма с тремя цветами и пятью размерами. Система автоматически генерирует 15 уникальных штрих-кодов, проверяет их на совпадения и формирует PDF с ценниками. Оператор печатает листы и расклеивает их на каждый товар.</p>

<p><b>Результат:</b> магазин получил единую систему учёта, независимую от внешних штрих-кодов производителей. Процесс маркировки стал быстрым, понятным и удобным: уникальные коды генерировались автоматически, а ценники печатались по готовому шаблону в несколько кликов.</p>
		
		`
      },
	  {
        title: "Использование сканеров штрих-кодов для ускорения работы операторов",
        description: `
<p><b>Задача:</b> создать удобный инструмент для обслуживания клиентов, которые приходили без предварительного интернет-заказа, и максимально упростить процесс пробития товаров в кассу.</p>
<p><b>Решение:</b> так как у каждого товара в системе был собственный уникальный штрих-код, операторы начали использовать сканеры, подключённые к ноутбукам. Система интернет-магазина фактически превратилась в полноценную кассовую программу.</p>
<p>Оператор создавал новый заказ и далее просто сканировал штрих-коды товаров. Сразу отображались название, изображение и цена, что исключало ошибки при подборе. В конце автоматически подсчитывалась сумма заказа, можно было добавить скидку (на отдельный товар или весь заказ) или сделать наценку при продаже юридическому лицу.</p>
<p>После сохранения заказа появлялись кнопки: «Распечатать заказ», «Отправить на фискальный регистратор» для печати чека или «Отправить заказ на e-mail клиента». Таким образом, процесс полностью повторял онлайн-оформление, только инициатором был оператор.</p>
<p>Система также легко масштабировалась: можно было подключить несколько ноутбуков и сканеров, и каждый оператор создавал заказы под своей учётной записью. При этом формирование чеков шло централизованно через один фискальный регистратор, что снижало затраты на оборудование. Имя кассира автоматически подставлялось в шаблон при генерации чека.</p>
<p><b>Пример:</b> клиент приходит в магазин без заказа. Оператор открывает новый заказ и сканирует костюм и два аксессуара. Товары сразу отображаются на экране с картинками и ценой, система считает итоговую сумму. Оператор применяет скидку 5 %, сохраняет заказ, печатает чек через фискальный регистратор и отправляет копию клиенту на почту.</p>
<p><b>Результат:</b> интернет-магазин превратился в полноценную кассовую систему, работающую как для онлайн-, так и для офлайн-продаж. Операторы получили быстрый и удобный инструмент без дублирования учёта, а клиенты — прозрачное и современное обслуживание.</p>		
		`
      },
	  {
        title: "Проверка наличия товаров перед оплатой и резервная система обработки заказов",
        description: `
<p><b>Задача:</b> обеспечить, чтобы клиент не смог оплатить заказ с товарами, которых уже нет на складе, и создать механизм резервного доступа к заказам на случай падения сайта или проблем с системой.</p>
<p><b>Решение:</b> при формировании заказа система автоматически проверяла корзину. Если хотя бы одна позиция закончилась, клиенту отображалось предупреждение с перечнем недоступных товаров. Заказ нельзя было подтвердить и оплатить, пока клиент не удалит или не заменит недостающие позиции. Это гарантировало корректность заказов и исключало оплату «пустых» товаров.</p>
<p>Кроме того, все заказы дублировались на e-mail операторов. Письмо содержало полный список товаров с картинками, ценами и количеством, а также кнопку «Отправить на оплату». Это позволяло работать с заказами даже без доступа к системе: например, со смартфона или при временной недоступности сайта. Таким образом, обработка заказов не зависела от работоспособности основной платформы.</p>
<p><b>Пример:</b> клиент оформляет заказ на костюм и маску, но маска уже закончилась. При попытке оформить заказ система уведомляет: «Товар отсутствует». Клиент удаляет маску, подтверждает заказ, получает ссылку на оплату. Оператор видит копию заказа в почте, может прямо оттуда отправить ссылку на оплату, даже если сайт временно недоступен.</p>
<p><b>Результат:</b> клиенты получали только актуальные заказы, операторы не тратили время на возвраты из-за отсутствия товара. Резервная схема с e-mail уведомлениями обеспечивала бесперебойную работу магазина даже в условиях технических сбоев. Это решение позволило обслуживать заказы буквально «на коленке», вплоть до обработки их со смартфонов, что сильно повышало надёжность системы.</p>
		`
      }
	  
    ]
  },
  {
    id: 4,
    name: "Продукты питания",
    year: 2023,
    rank: 5,
    type: "shop",
	typename: "Интернет-магазин",
	resolvedissue: 3,
    status: "",
    difficulty: 3,
    information: [
		"название: интернет-магазин «Затарка»", 
		"участие в проекте: автор пректа, разработка, ведение", 
		"схема работы: дроп-шипинг",
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 2", 
		"кол-во веток разработки: 1", 
		"дата последнего релиза: 20.09.2023",
		"период работы проекта: с 2023 по 2024 г.",
		"оснвной домен в период работы: zatarka.ru",
		"кол-во товарных позиций на сайте: более 800",
		"разработчик движка: собственная разработка"
		],
    logo: "media/zatarka.png",
    description: `<p>Интернет-магазин по продаже продуктов питания и бакалеи, ориентированный на мелкооптовых покупателей. Основной акцент делался на оптовые заказы: минимальная сумма заказа составляла 10 000 ₽, что позволяло обслуживать как розничные точки, так и небольшие компании.</p>
	<p>Оплата была возможна как онлайн на сайте, так и при получении заказа. Для клиентов предлагались разные варианты доставки: через транспортную компанию СДЭК по городу и регионам либо самовывоз со склада.</p>`,
	details: "",
	solutions: [
      {
        title: "Контроль минимальной суммы заказа",
        description: `
		<p><b>Задача:</b> ограничить оформление заказов только крупными партиями и исключить мелкие покупки, чтобы сохранить формат мелкооптового магазина.</p>
		<p><b>Решение:</b> в системе был установлен порог минимальной суммы заказа — 10 000 ₽. Пока стоимость товаров в корзине не достигала этой суммы, переход к оформлению был заблокирован. Клиент видел уведомление с пояснением о минимальной сумме заказа.</p>
		<p>Для гибкости оператор имел возможность менять установленный порог: например, снижать его в период акций или поднимать для отдельных категорий покупателей.</p>
		<p><b>Пример:</b> покупатель набирает товаров на 8 500 ₽ и пытается перейти к оформлению. Система выдаёт сообщение: «Минимальная сумма заказа — 10 000 ₽». После добавления ещё одной позиции корзина пересчитывается, сумма становится 10 200 ₽, и кнопка оформления заказа становится доступной.</p>
		<p><b>Результат:</b> магазин сохранил оптовый формат работы, а клиенты сразу понимали правила формирования заказа. Это исключило лишние обращения к операторам и упростило процесс обслуживания.</p>
		`
      },
      {
        title: "Интеграция доставки через СДЭК",
        description: `
		<p><b>Задача:</b> автоматизировать процесс доставки заказов по городу и регионам через сеть пунктов выдачи СДЭК, упростить работу операторов и обеспечить клиентам прозрачное отслеживание.</p>
		<p><b>Решение:</b> в системе был установлен модуль интеграции с СДЭК. После сборки заказа оператор мог распечатать стикер прямо из админки и наклеить его на посылку. Далее заказ отвозился в ближайший пункт приёма.</p>
		<p>Все данные о заказе — адрес, ФИО клиента, состав — хранились в системе и передавались в СДЭК. Клиенту после создания заказа приходила ссылка для отслеживания: он мог видеть, где находится его посылка, включая промежуточные города при межгородских доставках.</p>
		<p>Когда посылка приходила в пункт выдачи, клиент получал уведомление о готовности к выдаче. После фактического получения система автоматически переводила заказ в статус «Проведён».</p>
		<p><b>Пример:</b> клиент из Екатеринбурга оформил заказ на продукты. Оператор распечатал стикер, отвёз посылку в пункт СДЭК в Москве. Клиент по ссылке видит движение заказа: «Москва → Казань → Екатеринбург». После получения система фиксирует заказ как завершённый.</p>
		<p><b>Результат:</b> доставка стала прозрачной и удобной. Операторы сократили время на оформление и передачу заказов, а клиенты получили привычный интерфейс отслеживания через СДЭК. Магазин работал в полном соответствии с современной логистикой без дополнительных доработок.</p>
		`
      },
	  {
        title: "Оплата через подтверждение оператором",
        description: `
		<p><b>Задача:</b> исключить ситуации, когда клиент оплачивает товар, которого нет в наличии, и сохранить контроль оператора над каждым заказом.</p>
		<p><b>Решение:</b> в системе был подключён модуль онлайн-оплаты, работающий через подтверждение оператором. Клиент при оформлении заказа выбирал вариант «Оплата на сайте», но платёж не проводился сразу.</p>
		<p>Сначала заказ поступал оператору, который проверял наличие позиций на складе. После подтверждения клиенту отправлялась ссылка на оплату. Перейдя по ней, покупатель мог ввести данные карты или оплатить через доступные способы, после чего заказ автоматически получал статус «Оплачен».</p>
		<p><b>Пример:</b> клиент формирует заказ на 15 000 ₽ и выбирает оплату онлайн. Оператор проверяет наличие всех товаров, подтверждает заказ, и клиент получает письмо со ссылкой. После успешной оплаты заказ переводится в статус «Оплачен», а оператор видит уведомление о готовности к сборке.</p>
		<p><b>Результат:</b> система сохранила гибкость: клиент получал удобный инструмент для онлайн-платежей, а оператор — контроль за остатками. Магазин избежал возвратов и спорных ситуаций, связанных с отсутствием товаров на складе.</p>
		`
      }
    ]
  },
  {
    id: 5,
    name: "Оптовая торговля",
    year: 2010,
    rank: 6,
    type: "marketplace",
	typename: "Маркет-плейс",
	resolvedissue: 5,
    status: "",
    difficulty: 4,
    information: [
		"название: маркет-плейс «ОптТовар»", 
		"участие в проекте: автор проекта, разработка, ведение", 
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 2", 
		"кол-во веток разработки: 2",
		"дата старта работы над проектом: 01.05.2009",
		"период работы проекта: с 2010 по 2016 г.",
		"оснвной домен в период работы: opttovar.ru",
		"кол-во товарных позиций на сайте: более 1000",
		"разработчик движка: собственная разработка"
		],
    logo: "media/opttovar.png",
	screenshots: [                          
      "media/ot_screen1.jpg",
	  "media/ot_screen2.jpg"
    ],
    description: `
<p>Проект представлял собой онлайн-платформу для продавцов товаров разных производителей. Каждый продавец регистрировался в системе, добавлял своих поставщиков и товары, после чего мог продавать их через площадку. Для каждого производителя был предусмотрен собственный механизм оплаты и доставки.</p>
<p>Взаиморасчёты с владельцем площадки могли строиться как по абонентской плате, так и по комиссии с заказов. Это давало гибкость в монетизации и позволяло подключать разных партнёров на удобных для них условиях.</p>
<p>В результате была создана платформа-маркетплейс, которая обеспечивала удобство и для продавцов (гибкая настройка цен, индивидуальная логистика и оплата), и для покупателей (единый заказ, автоматическое распределение, понятная стоимость в зависимости от количества).</p>
	`,
	details: "",
	solutions: [
      {
        title: "Общая карточка товара и предложения продавцов",
        description: `
		<p><b>Задача:</b> сократить дублирование данных и ускорить ввод ассортимента, чтобы разные продавцы могли продавать один и тот же товар с собственными ценами и условиями.</p>
		<p><b>Решение:</b> введена модель «каталог (SKU) + предложения (offers)». Первый продавец создаёт базовую карточку товара. Когда другой продавец начинает вводить тот же товар, система подгружает похожие позиции из базы и при 100% совпадении автоматически подтягивает все характеристики и фотографии. Продавец меняет только свою цену, условия оплаты и доставки — без повторного заполнения описаний и медиа.</p>
		<p>Для покупателя карточка показывает один «главный» оффер, а ниже — подсказку с альтернативами: где можно купить тот же товар на других условиях. Какую карточку показывать покупателю в списках и поиске система выбирает случайно (ротацией), чтобы не давать постоянного преимущества одному продавцу; на самой карточке пользователь видит такие же товары от других продавцов.</p>
		<p><b>Пример:</b> продавец А заводит «Костюм Пират, размер L». Продавец Б при вводе видит совпадение, подтверждает его, указывает свою цену и доставку — характеристики и фото подтягиваются из каталога автоматически. Покупатель открывает карточку и видит предложение продавца А, а ниже — что тот же товар предлагают Б и В на иных условиях. При следующей выдаче «главным» может стать оффер продавца Б.</p>
		<p><b>Результат:</b> onboarding новых продавцов ускорился, база перестала плодить дубль-карточки, фото и характеристики хранятся единообразно, а покупатель получает прозрачный выбор условий. Чем больше товаров добавляют одни продавцы, тем легче другим подключаться — платформа усиливает сетевой эффект.</p>		
		`
      },
	  {
        title: "Контроль актуальности товаров через ограниченный срок публикации",
        description: `
		<p><b>Задача:</b> обеспечить, чтобы цены и информация о товарах на сайте всегда оставались актуальными, и исключить ситуации, когда продавцы забывают обновлять данные.</p>
		<p><b>Решение:</b> для каждого товара можно было задать срок публикации, максимальный — 1 месяц. Если продавец не обновлял данные в этот период, товар автоматически снимался с публикации. За несколько дней до окончания срока продавцу приходило уведомление на e-mail со списком товаров, у которых истекал срок размещения.</p>
		<p>В письме была специальная ссылка, по которой продавец мог одним кликом подтвердить актуальность всех позиций или перейти в систему и обновить цены вручную. Это обеспечивало простоту управления и стимулировало продавцов поддерживать свои товары в актуальном состоянии.</p>
		<p><b>Пример:</b> продавец добавил 50 товаров. Через месяц система автоматически отправляет уведомление: «У 12 товаров истекает срок публикации». Продавец переходит по ссылке из письма и подтверждает актуальность сразу всех позиций, либо заходит в систему и корректирует цены.</p>
		<p><b>Результат:</b> сайт всегда содержал только актуальные предложения. Клиенты не сталкивались с устаревшими ценами, а владельцы площадки получили автоматический инструмент контроля качества ассортимента.</p>
		`
      },
      {
        title: "Ввод тарифной сетки для товаров",
        description: `
		<p><b>Задача:</b> дать продавцам возможность гибко управлять ценообразованием и показывать покупателям реальные скидки при оптовых покупках.</p>
		<p><b>Решение:</b> в систему был добавлен механизм тарифной сетки. Продавец мог задавать любое количество ценовых уровней — от 1 и до 20 вариантов. На сайте это отображалось в виде таблицы с указанием количества и соответствующей цены. Покупатель сразу видел, начиная с какого объёма цена снижается, и мог рассчитать экономию.</p>
		<p>Сетка позволяла строить нелинейное ценообразование и учитывать кратность упаковок. Например: от 1 шт. — розничная цена, от 6 шт. — цена за коробку, от 300 шт. — цена за паллет, от 10 000 шт. — цена за фуру.</p>
		<p><b>Пример:</b> покупатель выбирает товар и указывает количество. Система показывает: при 1 шт. — 500 ₽, при 6 шт. — 450 ₽, при 300 шт. — 400 ₽, при 10 000 шт. — 350 ₽. Продавец гибко формирует стратегию продаж, а покупатель видит прозрачную выгоду от больших партий.</p>
		<p><b>Результат:</b> продавцы получили удобный инструмент управления ценами, покупатели — прозрачность условий и стимул заказывать больше. Платформа поддержала как розницу, так и оптовые закупки, что расширило аудиторию.</p>
		`
      },
	  {
        title: "Разделение заказов между продавцами при сохранении единого номера для покупателя",
        description: `
		<p><b>Задача:</b> сделать процесс оформления заказа привычным и простым для покупателя, но при этом корректно разделять заказ между разными продавцами, чтобы каждый видел только свои товары.</p>
		<p><b>Решение:</b> покупатель добавлял товары в корзину так же, как в обычном интернет-магазине. Но при переходе в корзину система автоматически распределяла позиции по продавцам. Для клиента заказ выглядел единым и имел один общий номер. Для продавцов и администратора система использовала дополнительный префикс: например, клиент получает заказ №321, продавец А видит №321/1, продавец Б — №321/2, а администратор видит №321 и все его части.</p>
		<p>Таким образом, продавец работал только со своей частью заказа и не имел доступа к товарам других продавцов. Каждый продавец получал уведомление на e-mail только со своей частью заказа, что обеспечивало прозрачность и безопасность.</p>
		<p><b>Пример:</b> клиент оформил заказ на 5 товаров, из которых 3 относятся к продавцу А, а 2 — к продавцу Б. Для клиента заказ имеет номер 321. В кабинете продавца А этот заказ отображается как 321/1 и содержит только его 3 товара. У продавца Б заказ отображается как 321/2 с его 2 товарами. Администратор видит общий заказ 321 и при открытии — обе части.</p>
		<p><b>Результат:</b> покупатель получает единый и удобный заказ, а система автоматически распределяет товары между продавцами. Это упростило работу продавцов, исключило путаницу и сделало процесс обслуживания прозрачным.</p>
		`
      },
	  {
        title: "Автоматизация взаиморасчётов с продавцами",
        description: `
		<p><b>Задача:</b> автоматизировать процесс оплаты за использование площадки и сделать расчёты прозрачными и удобными как для владельца системы, так и для продавцов.</p>
		<p><b>Решение:</b> система поддерживала два варианта оплаты: фиксированная абонентская плата или процент от оборота заказов. Продавцы могли выбирать периодичность платежей — ежемесячно, ежеквартально или ежегодно. Встроенный механизм уведомлений автоматически напоминал о завершении оплаченного периода и необходимости продления.</p>
		<p>В случае расчётов по проценту система раз в период делала выборку всех заказов конкретного продавца, считала оборот и рассчитывала сумму комиссии. Размер процента был гибким и зависел от вида продукции и объёмов: чем выше обороты продавца, тем ниже процент за использование системы.</p>
		<p><b>Пример:</b> продавец подключился на условиях 5 % комиссии. За месяц его оборот составил 1 млн ₽. Система автоматически рассчитывает комиссию в размере 50 тыс. ₽, формирует уведомление и отображает расчёт в личном кабинете продавца. При этом при обороте свыше 3 млн ₽ ставка могла снизиться, например, до 3 %.</p>
		<p><b>Результат:</b> расчёты стали полностью прозрачными и предсказуемыми. Владельцы площадки избавились от ручных проверок, а продавцы — от необходимости вести отдельный учёт. Система автоматически контролировала периоды и суммы, упрощая сотрудничество и стимулируя рост оборотов.</p>
		`
      }
    ]
  },
  {
    id: 6,
    name: "Бронирование туров и круизов",
    year: 2009,
    rank: 7,
    type: "booking",
	typename: "Система бронирования",
	resolvedissue: 5,
    status: "",
    difficulty: 5,
    information: [
		"участие в проекте: разработка, ведение", 
		"статус проекта: завершен, в архиве", 
		"кол-во полных релизов: 3", 
		"кол-во веток разработки: 3", 
		"дата последнего релиза: 20.11.2015",
		"период работы проекта: с 2008 по 2015 г.",
		"оснвной домен в период работы: d-dialog.ru",
		"разработчик движка: собственная разработка"
		],
    logo: "media/dd.png",
	screenshots: [                          
      "media/dd_screen1.jpg"
    ],
    description: `
	<p>Проект по разработке системы взаимодействия туроператоров и турагентов. Система предназначена для упрощения и автоматизации рабочих процессов в сфере туризма. Она поддерживает многопользовательский режим с гибким распределением прав доступа: туроператоры, турагенты и администраторы получают собственные наборы инструментов для эффективной работы.</p>
	<p>Ключевым элементом является автоматизация взаиморасчётов между туроператорами и агентами, что позволяет минимизировать ручные операции и исключить финансовые ошибки. Встроенные механизмы обеспечивают создание туров по линейке дат с возможностью их автопродления, что снижает нагрузку на сотрудников и делает процесс более предсказуемым.</p>
	<p>Система также поддерживает создание заказов на туры с мгновенной рассылкой уведомлений всем участникам. Гибкая логика формирования маршрутов позволяет задавать сложные комбинации — от локальных туров по городам до международных программ с несколькими странами.</p>
	`,
	details: "",
	solutions: [
      {
        title: "Формирование маршрута круизного лайнера на карте с привязкой к реальным портам",
        description: `
		<p><b>Решение:</b> в системе реализован интерфейс, где оператор указывает список портов в порядке следования. Далее используется Google Maps API для определения координат. Каждая точка предварительно согласовывается с оператором порта для исключения ошибок позиционирования. После подтверждения данные фиксируются в базе и становятся доступными для визуализации. На клиентской стороне автоматически строится маршрут: Google Maps отображает соединительные линии между точками, формируя цельную схему путешествия. Маршрут можно масштабировать, рассматривать детально и оценивать весь путь лайнера от первого до последнего порта.</p>
		<p><b>Результат:</b> решение автоматизировало процесс построения маршрутов, снизило количество ошибок при вводе данных и дало туристам удобный инструмент для визуального ознакомления с программой круиза. Техническая интеграция с Google Maps API позволила добиться высокой точности и интерактивности.
		`
      },
      {
        title: "Автоматизация создания туров с разными датами",
        description: `
		<p><b>Задача:</b> исключить необходимость вручную создавать одинаковые туры, отличающиеся только датами проведения. Этот процесс занимал значительное время и был подвержен человеческим ошибкам.</p>
		<p><b>Решение:</b> внедрён механизм автоматической генерации туров по шаблону дат. Оператор задаёт параметры — дни недели (например, вторник и четверг) или конкретные даты месяца, а также период действия (месяц, квартал или год). Система на основе этих правил автоматически пересоздаёт туры с нужными датами.</p>
		<p><b>Пример:</b> если оператор указывает «каждый вторник и четверг в течение 3 месяцев», система автоматически формирует 24 тура, равномерно распределённых по календарю, без необходимости ручного копирования. </p>
		<p><b>Результат:</b> управление турами стало быстрее и эффективнее. Операторы избавились от рутинных операций, сократилось количество ошибок при вводе данных, а планирование туров на длительный период стало максимально предсказуемым и удобным.</p>
		`
      },
	  {
        title: "Автоматизация расчётов комиссионных между туроператорами и турагентами",
        description: `
		<p><b>Задача:</b> упростить и ускорить процесс взаиморасчётов между туроператорами и турагентами, исключив ручные вычисления и вероятность ошибок при подсчётах.</p>
		<p><b>Решение:</b> в системе реализован модуль автоматизированных расчётов. Оператор задаёт период (например, месяц или квартал), за который нужно провести взаиморасчёты. Далее система по заданной формуле рассчитывает комиссионные: либо процент с продаж, либо фиксированная ставка за каждый тур. Все проведённые туры за выбранный период обрабатываются автоматически, и итоговые данные формируются в отчёт.</p>
		<p><b>Пример:</b> агент за месяц продал 15 туров. Для части туров установлена комиссия в размере 10% от стоимости, для других — фиксированная ставка 50 $. Система автоматически рассчитывает итоговую сумму комиссионных, суммирует её и формирует отчёт для обеих сторон.</p>
		<p><b>Результат:</b> процесс взаиморасчётов стал полностью автоматизированным, прозрачным и быстрым. Это снизило нагрузку на операторов, исключило риск ошибок и ускорило закрытие отчётных периодов.</p>
		`
      },
	  {
        title: "Формирование автоматических договоров по шаблону",
        description: `
		<p><b>Задача:</b> сократить время на подготовку договоров между туроператорами и турагентами и минимизировать количество ошибок, связанных с ручным вводом реквизитов.</p>
		<p><b>Решение:</b> в систему добавлен модуль автоматической генерации договоров. Оператор загружает шаблон договора с заранее обозначенными полями для реквизитов. При создании документа система автоматически подтягивает данные о турагенте из базы (название компании, юридический адрес, банковские реквизиты и т. д.) и подставляет их в нужные места договора. После генерации документ отправляется туроператором агенту на подтверждение. Агент может принять договор или вернуть его на корректировку. Все действия сопровождаются автоматическими уведомлениями на электронную почту, что делает процесс прозрачным и удобным.</p>
		<p><b>Пример:</b> оператор загружает шаблон договора на сотрудничество. Система формирует индивидуальный документ для конкретного турагента, подставив его реквизиты и условия. Агент получает уведомление на почту, открывает готовый договор в PDF и либо подтверждает его, либо оставляет комментарии для доработки.</p>
		<p><b>Результат:</b> процесс подготовки договоров стал полностью автоматизированным. Снизилось время на оформление, исключены ошибки ручного ввода, а взаимодействие между туроператором и агентом стало быстрее и более структурированным. Готовые договоры доступны для скачивания в формате PDF, что облегчает хранение и обмен документами.</p>
		`
      }
    ]
  }
];