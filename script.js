const container = document.getElementById("projectsContainer");
const modal = document.getElementById("projectModal");
const modalContent = document.querySelector(".modal-content");

let currentCard = null;
let currentScreenshotIndex = 0;
let arrowsHandler = null;
let lightbox = null;



// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===
function runSequence(steps) {
  let i = 0;

  function nextStep() {
    if (i >= steps.length) return;

    const step = steps[i];
    i++;

    if (Array.isArray(step)) {
      // –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
      step.forEach(triggerElement);
    } else {
      triggerElement(step);
    }

    const delay = Array.isArray(step)
      ? Math.max(...step.map(s => s.delay || 600))
      : (step.delay || 600);

    setTimeout(nextStep, delay);
  }

  function triggerElement(step) {
    const element = typeof step.el === "string"
      ? document.querySelector(step.el)
      : step.el;

    if (element) {
      element.classList.add(step.className);
    }
  }

  nextStep();
}

// === –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ ===
function renderProjects(list) {
  const currentNames = list.map(p => p.name);

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  Array.from(container.children).forEach(card => {
    const name = card.querySelector("h3").innerText;
    if (!currentNames.includes(name)) {
      card.classList.remove("show");
      card.classList.add("hide");
      setTimeout(() => card.remove(), 800);
    }
  });

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  list.forEach((p) => {
    const exists = [...container.children].some(
      c => c.querySelector("h3").innerText === p.name
    );
    if (exists) return;

    const stars = "‚òÖ".repeat(p.difficulty) + "".repeat(5 - p.difficulty);
    const card = document.createElement("div");
    card.className = "project animate";
    card.innerHTML = `
      <div class="project-image">
        <img src="${Array.isArray(p.logo) ? p.logo[0] : p.logo}" alt="${p.name}">
      </div>
      <div class="content">
	   <div class="resolved-issue-digit">${p.resolvedissue}</div>
          <div class="resolved-issue">${getSolutionWords(p.resolvedissue)}</div>           
        <div class="type-description">${p.typename ?? ""}</div>
        <h3>${p.name}</h3>
        <div class="content-bottom">
          <div class="difficulty">${stars}<br>
          <span class="difficulty2">–∫–ª–∞—Å—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</span></div>
          <div class="year">${p.year ?? "-"} –≥.</div>
        </div>
      </div>
      <div class="gradient gradient-bottom"></div>
      <div class="gradient gradient-left"></div>
    `;
    card.addEventListener("click", () => openModal(p, card));
    container.appendChild(card);
  });

  // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è
  const steps = [
    { el: "header", className: "show", delay: 300 },
    { el: "#projectsContainer", className: "ready", delay: 500 },
    { el: ".logo-circle", className: "show", delay: 300 },
    { el: ".cta-circle", className: "show", delay: 600 }
  ];

  const cards = container.querySelectorAll(".project.animate");
  cards.forEach((card) => {
    steps.push({ el: card, className: "show", delay: 200 });
  });

  steps.push({ el: ".logo-circle", className: "show", delay: 1000 });
  steps.push({ el: ".cta-button", className: "show", delay: 1000 });

  runSequence(steps);
}

// === –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Å FLIP-–∞–Ω–∏–º–∞—Ü–∏–µ–π) ===
function applyFilters() {
  let list = [...projects];

  const filter = filterSelect.value;
  if (filter !== "all") list = list.filter(p => p.type === filter);

  const sort = sortSelect.value;
  list.sort((a, b) => {
    if (sort === "year") return b.year - a.year;
    if (sort === "name") return a.name.localeCompare(b.name);
    return a.rank - b.rank;
  });

  // –¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM
  const cards = Array.from(container.querySelectorAll(".project"));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫,
  // –∏–ª–∏ –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—è–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–µ)?
  const namesNow  = cards.map(c => c.querySelector("h3").innerText);
  const namesNext = list.map(p => p.name);
  const sameSet =
    namesNow.length === namesNext.length &&
    namesNow.every(n => namesNext.includes(n));

  // –ï—Å–ª–∏ –Ω–∞–±–æ—Ä –¥—Ä—É–≥–æ–π (—Ñ–∏–ª—å—Ç—Ä), –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º –±–µ–∑ FLIP
  if (!sameSet) {
    renderProjects(list);
    return;
  }

  // --- FLIP: FIRST (—Å–Ω–∏–º–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏) ---
  const firstRects = new Map();
  cards.forEach(card => firstRects.set(card, card.getBoundingClientRect()));

  // –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
  const byName = new Map(cards.map(c => [c.querySelector("h3").innerText, c]));
  list.forEach(p => {
    const card = byName.get(p.name);
    if (card) container.appendChild(card);
  });

  // --- FLIP: LAST + INVERT (–∞–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–µ–∑–¥) ---
  byName.forEach((card) => {
    const last  = card.getBoundingClientRect();
    const first = firstRects.get(card);
    if (!first) return;

    const dx = first.left - last.left;
    const dy = first.top  - last.top;

    if (dx !== 0 || dy !== 0) {
      card.style.transform  = `translate(${dx}px, ${dy}px)`;
      card.style.transition = "none";

      requestAnimationFrame(() => {
        card.style.transition = "transform 1600ms cubic-bezier(0.22,1,0.36,1)";
        card.style.transform  = "translate(0,0)";
      });

      card.addEventListener("transitionend", () => {
        card.style.transition = "";
        card.style.transform  = "";
      }, { once: true });
    }
  });
}



// === –ó–∞–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏–π ===
document.addEventListener("DOMContentLoaded", () => {
  if (typeof projects !== "undefined") {
    renderProjects(projects);
  }

  const logo = document.querySelector(".logo-circle");

  if (logo) {
    logo.addEventListener("click", (e) => {
      if (logo.classList.contains("spinning")) return;

      const rect = logo.getBoundingClientRect();
      const clickX = e.clientX - rect.left;
      const centerX = rect.width / 2;

      // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—á–∫–∞
      const direction = clickX < centerX ? -1 : 1;

      // —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ–±–æ—Ä–æ—Ç–æ–≤ (5‚Äì20)
      const rotations = Math.floor(Math.random() * 10) + 5;

      // –∑–∞–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      logo.style.setProperty("--rotations", rotations);
      logo.style.setProperty("--tilt", `${direction * 20}px`);
      logo.style.setProperty("--twist", `${direction * 2}deg`);

      logo.classList.add("spinning");

      logo.addEventListener("animationend", () => {
        logo.classList.remove("spinning");
        logo.style.removeProperty("--tilt");
        logo.style.removeProperty("--twist");
      }, { once: true });
    });
  }
});

const contactCircle = document.getElementById("contactCircle");
const contactOptions = document.getElementById("contactOptions");
contactCircle.dataset.state = contactCircle.dataset.state || "text";
// –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
const actions = [
  { name: "Telegram", icon: "img/tg1.png", link: "https://t.me/nedmaier" },
  { name: "Email", icon: "img/mail_white2.png", link: "mailto:test@example.com" },
  { name: "WhatsApp", icon: "img/whatsupp_white.png", link: "https://wa.me/123456789" }
];

let closeTimer = null;
// ‚öôÔ∏è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const FIRST_SPIN_DEG = 180;      // —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã (–æ–±—ã—á–Ω–æ 180)
const FIRST_SPIN_DURATION = 600; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã (–º—Å)
const FIRST_SHIFT = 120;         // —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã
const SPIN_DEG = 720;            // –æ–±–æ—Ä–æ—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç (540 / 720 / 1080 –∏ —Ç.–¥.)

function adjustTopbarShift() {
  const row = document.querySelector(".topbar-row");
  const opts = document.getElementById("contactOptions");
  if (!row || !opts) return;

  const last = opts.querySelector(".contact-option:last-child");
  if (!last) {
    row.style.setProperty("--auto-shift", "0px");
    return;
  }

  // —á—É—Ç—å —Ä–∞–Ω—å—à–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º (—á–µ—Ä–µ–∑ 550‚Äì600–º—Å)
  setTimeout(() => {
    const lastRect = last.getBoundingClientRect();
    const vw = window.innerWidth || document.documentElement.clientWidth;

    // –≤—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    let overflow = Math.ceil(lastRect.right - vw + 12);

    // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å (—á—Ç–æ–±—ã –Ω–µ –≤–ø—Ä–∏—Ç—ã–∫)
    if (overflow > 0) overflow += 42;  // <--- üëà –¥–æ–±–∞–≤–ª—è–µ–º 42px –≤–æ–∑–¥—É—Ö–∞

    if (overflow > 0) {
      const shiftValue = Math.min(overflow, vw * 0.3); // <--- üëà —É–≤–µ–ª–∏—á–∏–ª –º–∞–∫—Å–∏–º—É–º –¥–æ 30% —à–∏—Ä–∏–Ω—ã
      row.style.setProperty("--auto-shift", `-${shiftValue}px`);
    } else {
      row.style.setProperty("--auto-shift", "0px");
    }
  }, 0); // <--- üëà —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –ø–æ—á—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–µ–∑–¥–∞)
}

function resetTopbarShift() {
  const row = document.querySelector(".topbar-row");
  if (row) row.style.setProperty("--auto-shift", "0px");
}



// === –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ===
contactCircle.addEventListener("click", (e) => {
  const isIcon = contactCircle.dataset.state === "icon";

  if (isIcon) {
    window.open(actions[0].link, "_blank");
    return;
  }
  e.preventDefault();

  if (actions.length === 0) return;

  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ ‚Üí —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç–æ–π
  contactCircle.style.transition = `transform ${FIRST_SPIN_DURATION}ms ease`;
  contactCircle.style.transform = `rotateY(${FIRST_SPIN_DEG}deg)`;

  setTimeout(() => {
    contactCircle.innerHTML = `<img src="${actions[0].icon}" alt="${actions[0].name}">`;
    contactCircle.removeAttribute("href");
    contactCircle.dataset.state = "icon";
    contactCircle.style.transform = "rotateY(0deg)"; // —Å–±—Ä–æ—Å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
  }, FIRST_SPIN_DURATION / 2);

  if (actions.length > 1) {
  showContactOptions();

  // ‚öôÔ∏è –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–Ω–µ—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ~600–º—Å)
  setTimeout(() => {
    adjustTopbarShift();
  }, 900);
}
});

// === –í—ã–∫–∞—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç ===
function showContactOptions() {
  contactOptions.innerHTML = "";

  actions.slice(1).forEach((action, i) => {
    const div = document.createElement("div");
    div.className = "contact-option";

    // –°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ (–≤—Ç–æ—Ä–∞—è –º–æ–Ω–µ—Ç–∞ –¥–∞–ª—å—à–µ –Ω–∞ FIRST_SHIFT)
    div.style.setProperty("--shift", `${(i + 1) * FIRST_SHIFT}px`);

    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    div.style.setProperty("--spin", `${SPIN_DEG}deg`);

    div.innerHTML = `<img src="${action.icon}" alt="${action.name}">`;
    div.addEventListener("click", () => window.open(action.link, "_blank"));
    contactOptions.appendChild(div);

    setTimeout(() => {
      div.offsetWidth;
      div.classList.add("show");
    }, i * 200);
  });

  contactOptions.classList.add("show");

  if (closeTimer) clearTimeout(closeTimer);
  closeTimer = setTimeout(hideContactOptions, 7000);
}

function hideContactOptions() {
  [...contactOptions.children].reverse().forEach((div, i) => {
    setTimeout(() => {
      div.classList.remove("show");
    }, i * 250);
  });

  setTimeout(() => {
    contactCircle.style.transition = `transform ${FIRST_SPIN_DURATION}ms ease`;
    contactCircle.style.transform = `rotateY(${FIRST_SPIN_DEG}deg)`;

    setTimeout(() => {
      contactCircle.innerHTML = `<span class="order_button">–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>`;
      contactCircle.removeAttribute("href");
      contactCircle.dataset.state = "text";
      contactCircle.style.transform = "rotateY(0deg)";
    }, FIRST_SPIN_DURATION / 2);

    contactOptions.innerHTML = "";
	 setTimeout(() => resetTopbarShift(), 600);
  }, 700);
}



// === —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ ===
function getSolutionWords(n) {
  const lastTwo = n % 100;
  const last = n % 10;

  if (lastTwo >= 11 && lastTwo <= 14) {
    return "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö<br>—Ä–µ—à–µ–Ω–∏–π";
  }
  if (last === 1) {
    return "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ<br>—Ä–µ—à–µ–Ω–∏–µ";
  }
  if (last >= 2 && last <= 4) {
    return "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö<br>—Ä–µ—à–µ–Ω–∏—è";
  }
  return "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö<br>—Ä–µ—à–µ–Ω–∏–π";
}

// === –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É (FLIP —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏) ===
function openModal(project, card) {
  const container = document.getElementById("projectsContainer");

  // —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (card.classList.contains("expanded")) return;
// üìç –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏
card.dataset.nextSibling = card.nextElementSibling ? card.nextElementSibling.dataset.name || card.nextElementSibling.querySelector("h3")?.innerText || "" : "";
  // –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é, –µ—Å–ª–∏ –±—ã–ª–∞
  const opened = container.querySelector(".project.expanded");
  if (opened && opened !== card) closeModal(opened);

  // –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã—Ç—å"
  container.classList.add("expanded");
  // üßπ –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
container.querySelectorAll(".project").forEach(el => {
  if (el !== card) el.classList.add("hidden-project");
});
  card.classList.add("will-expand");

  // FIRST: —Ç–µ–∫—É—â–µ–µ (collapsed)
  const first = card.getBoundingClientRect();

  // –≤—Å—Ç–∞–≤–ª—è–µ–º/–ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º details
  let details = card.querySelector(".project-details");
  if (details) details.remove();

  details = document.createElement("div");
  details.className = "project-details";

  const screenshots = Array.isArray(project.screenshots) ? project.screenshots : [];
  let idx = 0;
  const hasShots = screenshots.length > 0;

  const shotsHTML = hasShots ? `
    <div class="screenshots-slider active">
      <button class="prev" type="button" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π">‚Äπ</button>
      <img class="current" src="${screenshots[0]}" alt="screenshot">
      <button class="next" type="button" aria-label="–°–ª–µ–¥—É—é—â–∏–π">‚Ä∫</button>
    </div>
  ` : "";

  details.innerHTML = `
  ${project.description ? `<h4>–û –ø—Ä–æ–µ–∫—Ç–µ</h4>${project.description}` : ""}
  ${project.status ? `<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${project.status}</p>` : ""}
  ${project.details ? `<p class="details"><strong>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</strong> ${project.details}</p>` : ""}  
`;

// ‚úÖ –≤—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ ¬´–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è¬ª
if (project.solutions && project.solutions.length) {
  const solutionsBlock = document.createElement("div");
  solutionsBlock.className = "solutions-block";
  solutionsBlock.innerHTML = `<h4>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h4>`;

  project.solutions.forEach((sol) => {
    const item = document.createElement("div");
    item.className = "solution-item";
    item.innerHTML = `
      <div class="solution-title">
        <span class="title-text">${sol.title}</span>
        <span class="toggle-icon"></span>
      </div>
      <div class="solution-desc">${sol.description}</div>
    `;
    solutionsBlock.appendChild(item);
  });

  details.appendChild(solutionsBlock);

  // –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
 solutionsBlock.querySelectorAll(".solution-title").forEach(title => {
  title.addEventListener("click", () => {
    const item = title.parentElement;
    const desc = title.nextElementSibling;

    item.classList.toggle("active");
    desc.classList.toggle("show");
  });
});
}

// === –Ω–æ–≤—ã–π –±–ª–æ–∫ information ===
if (project.information && project.information.length) {
  const infoBlock = document.createElement("div");
  infoBlock.className = "info-block";
  infoBlock.innerHTML = `<h4>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>`;

  const ul = document.createElement("ul");
  project.information.forEach(item => {
    const li = document.createElement("li");
    li.textContent = item;
    ul.appendChild(li);
  });

  infoBlock.appendChild(ul);
  details.appendChild(infoBlock);
}
// ‚úÖ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Ä–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
if (shotsHTML) {
  details.insertAdjacentHTML("beforeend", shotsHTML);
}

  // –≤–∫–ª—é—á–∞–µ–º expanded
  card.classList.add("expanded", "expanding");
  card.setAttribute("aria-expanded", "true");
  card.appendChild(details);
  // üîπ –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω—é—é –∫–Ω–æ–ø–∫—É "–≤–µ—Ä–Ω—É—Ç—å—Å—è"
	let backBtn = document.createElement("button");
	backBtn.className = "close-details-floating";
	backBtn.textContent = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤";
	document.body.appendChild(backBtn);

// –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
function positionBackButton() {
  const rect = card.getBoundingClientRect();
  backBtn.style.position = "absolute";
backBtn.style.top = `${window.scrollY + rect.top - Math.min(50, rect.height * 0.03)}px`;

const btnWidth = backBtn.offsetWidth || 240; // fallback –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –µ—â—ë –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∞—Å—å
backBtn.style.left = `${window.scrollX + rect.left + rect.width / 2 - btnWidth / 2}px`;
}
positionBackButton();

// –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ/resize
window.addEventListener("scroll", positionBackButton);
window.addEventListener("resize", positionBackButton);

// –∑–∞–∫—Ä—ã—Ç–∏–µ
backBtn.addEventListener("click", (e) => {
  e.stopPropagation();
  closeModal(card);
  backBtn.remove();
  window.removeEventListener("scroll", positionBackButton);
  window.removeEventListener("resize", positionBackButton);
});

  

  // –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–∞–π–¥–µ—Ä
  if (hasShots) {
    const img = details.querySelector("img.current");
    const prev = details.querySelector(".prev");
    const next = details.querySelector(".next");

    function show(i) {
      if (!screenshots.length) return;
      idx = (i + screenshots.length) % screenshots.length;
      img.classList.add("fade-out");
      setTimeout(() => {
        img.src = screenshots[idx];
        img.classList.remove("fade-out");
      }, 220);
    }
    prev.addEventListener("click", (e) => { e.stopPropagation(); show(idx - 1); });
    next.addEventListener("click", (e) => { e.stopPropagation(); show(idx + 1); });
	
	  img.addEventListener("click", (e) => {
    e.stopPropagation();
    openLightbox(img.src);
  });
  }

  // LAST: expanded
  const last = card.getBoundingClientRect();

  // INVERT
  const dx = first.left - last.left;
  const dy = first.top  - last.top;
  const sx = first.width  / last.width  || 1;
  const sy = first.height / last.height || 1;

  card.style.transition = "none";
  card.style.transform  = `translate(${dx}px, ${dy}px) scale(${sx}, ${sy})`;

  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      card.style.transition = "transform 1300ms cubic-bezier(0.22,1,0.36,1), opacity 300ms ease";
      card.style.transform  = "translate(0,0) scale(1)";
    });
  });

  card.addEventListener("transitionend", function tidy(e) {
	// üí´ –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫—Ä–æ–º–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ–π
setTimeout(() => {
  document.querySelectorAll(".project").forEach(el => {
    if (el !== card) {
      el.classList.add("faded-out");
    }
  });
}, 150); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å FLIP  
	  
    if (e.propertyName !== "transform") return;
    card.style.transition = "";
    card.style.transform  = "";
    card.classList.remove("expanding", "will-expand");
    card.removeEventListener("transitionend", tidy);
  });
}

// === –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É (FLIP –æ–±—Ä–∞—Ç–Ω–æ) ===
function closeModal(card) {
  // üßπ –£–¥–∞–ª—è–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
  const floatingBtn = document.querySelector(".close-details-floating");
  if (floatingBtn) floatingBtn.remove();

  const container = document.getElementById("projectsContainer");
  if (!card) card = container.querySelector(".project.expanded");
  if (!card) return;

  // üí´ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º "–ø—Ä—ã–∂–æ–∫" –∏–∑-–∑–∞ –∏—Å—á–µ–∑–∞—é—â–µ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  if (scrollbarWidth > 0) {
    document.body.style.paddingRight = `${scrollbarWidth}px`;
    document.body.style.overflowY = "hidden";
  }

  // --- 1Ô∏è‚É£ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–æ—Ç–æ–∫, –∏–Ω–∞—á–µ –æ–Ω–∏ "display:none" –∏ –Ω–µ –≤–∏–¥–Ω—ã FLIP ---
  container.querySelectorAll(".project.hidden-project").forEach(el => el.classList.remove("hidden-project"));

  // --- 2Ô∏è‚É£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è ---
  const cards = Array.from(container.querySelectorAll(".project"));
  const firstRects = new Map();
  cards.forEach(el => firstRects.set(el, el.getBoundingClientRect()));

  // --- 3Ô∏è‚É£ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ---
  card.classList.add("collapsing");
  card.classList.remove("expanded");
  card.setAttribute("aria-expanded", "false");
  container.classList.remove("expanded");

  // --- 4Ô∏è‚É£ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç –º–∞–∫–µ—Ç–∞ ---
  void container.offsetWidth;

  // --- 5Ô∏è‚É£ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ---
  const lastRects = new Map();
  cards.forEach(el => lastRects.set(el, el.getBoundingClientRect()));

  // --- 6Ô∏è‚É£ FLIP-–∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ ---
  cards.forEach(el => {
    const first = firstRects.get(el);
    const last  = lastRects.get(el);
    if (!first || !last) return;
    const dx = first.left - last.left;
    const dy = first.top  - last.top;
    const sx = first.width  / last.width  || 1;
    const sy = first.height / last.height || 1;

    el.style.transition = "none";
    el.style.transform  = `translate(${dx}px, ${dy}px) scale(${sx}, ${sy})`;
    el.style.willChange = "transform";

    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        // üé¨ —Ç—É—Ç –º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–π 900ms ‚Üí 1300ms, 1500ms –∏ —Ç.–¥.)
        el.style.transition = "transform 1300ms cubic-bezier(0.22,1,0.36,1), opacity 0.6s ease";
        el.style.transform  = "translate(0,0) scale(1)";
        el.style.opacity = "1";
        el.style.filter = "blur(0)";
      });
    });

    el.addEventListener("transitionend", function onEnd(e) {
      if (e.propertyName !== "transform") return;
      el.style.transition = "";
      el.style.transform  = "";
      el.style.willChange = "";
      el.removeEventListener("transitionend", onEnd);
    });
  });

  // --- 7Ô∏è‚É£ —É–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ ---
  const details = card.querySelector(".project-details");
  if (details) details.remove();

  // --- 8Ô∏è‚É£ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å–≤–æ—ë –º–µ—Å—Ç–æ ---
  setTimeout(() => {
    const nextName = card.dataset.nextSibling;
    if (nextName) {
      const nextEl = [...container.children].find(el => {
        const title = el.querySelector("h3")?.innerText;
        return title === nextName;
      });
      if (nextEl) container.insertBefore(card, nextEl);
      else container.appendChild(card);
    } else {
      container.appendChild(card);
    }
    card.classList.remove("collapsing");

    // ‚úÖ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    container.querySelectorAll(".project").forEach(el => {
      el.style.opacity = "1";
      el.style.filter = "none";
      el.style.pointerEvents = "auto";
    });

    // üßπ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    document.body.style.overflowY = "";
    document.body.style.paddingRight = "";
  }, 1300);
}






// === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω ===
modal.addEventListener("click", (e) => {
  if (e.target === modal) {
    closeModal();
  }
});

// === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape ===
document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") {
    if (lightbox) { closeLightbox(); return; }
    if (modal.style.display === "grid") closeModal();
  }
});

// === Fade-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ===
function fadeChange(img, newSrc) {
  img.classList.add("fade-out");
  setTimeout(() => {
    img.src = newSrc;
    img.classList.remove("fade-out");
  }, 200);
}

// === Lightbox ===
function openLightbox(src) {
  if (lightbox) lightbox.remove();
  lightbox = document.createElement("div");
  lightbox.className = "lightbox";
  lightbox.innerHTML = `<img src="${src}" alt="full">`;
  document.body.appendChild(lightbox);
  lightbox.addEventListener("click", () => closeLightbox());
}
function closeLightbox() {
  if (lightbox) {
    lightbox.remove();
    lightbox = null;
  }
}



sortSelect.addEventListener("change", applyFilters);
filterSelect.addEventListener("change", applyFilters);



// ======================================================
// üîπ –†–∞–±–æ—Ç–∞ —Å URL (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ / –Ω–∞–∑–∞–¥)
// ======================================================
function openProjectByLink(link) {
  if (!link) return;
  const project = projects.find(p => p.link === link);
  if (!project) return;

  const card = [...document.querySelectorAll(".project")].find(
    el => el.querySelector("h3")?.innerText === project.name
  );

  if (card) {
    openModal(project, card);
  } else {
    // –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –µ—â—ë –Ω–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–ª—å—Ç—Ä –¥—Ä—É–≥–æ–π)
    applyFilters();
    setTimeout(() => {
      const retry = [...document.querySelectorAll(".project")].find(
        el => el.querySelector("h3")?.innerText === project.name
      );
      if (retry) openModal(project, retry);
    }, 600);
  }
}

window.addEventListener("popstate", () => {
  const link = window.location.pathname.replace("/", "");
  if (!link) {
    // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
    const opened = document.querySelector(".project.expanded");
    if (opened) closeModal(opened);
  } else {
    openProjectByLink(link);
  }
});

// ======================================================
// üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ URL –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
// ======================================================
const originalOpenModal = openModal;
openModal = function (project, card) {
  originalOpenModal(project, card);

  // ‚úÖ –ú–µ–Ω—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å link
  if (project.link && typeof project.link === "string" && project.link.trim() !== "") {
    window.history.pushState({ project: project.link }, "", `/${project.link}`);
  }
};

const originalCloseModal = closeModal;
closeModal = function (card) {
  originalCloseModal(card);

  // ‚úÖ –í–æ–∑–≤—Ä–∞—Ç URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω
  if (window.location.pathname !== "/") {
    window.history.pushState({}, "", "/");
  }
};

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
document.addEventListener("DOMContentLoaded", () => {
  sortSelect.value = "year";   // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
  applyFilters();
   // üîπ NEW: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
  const link = window.location.pathname.replace("/", "");
  if (link) openProjectByLink(link); // –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
});